{"version":3,"sources":["../../src/config/livepeer.js"],"names":["client","Lokka","transport","Transport","query","fetchData","address","sdk","rpc","user_req","getDelegator","toLowerCase","qraph_req","price_req","Promise","all","results","user","delegator","json","price","ticker"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;;;;;AAEA,IAAMA,SAAS,IAAIC,YAAJ,CAAU;AACvBC,aAAW,IAAIC,6BAAJ,CAAc,oEAAd;AADY,CAAV,CAAf;;AAIA,IAAMC,oMAAN;;AAaO,IAAMC;AAAA,sFAAY,iBAAOC,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACL,oBADK;;AAAA;AACjBC,eADiB;AAEfC,eAFe,GAEPD,GAFO,CAEfC,GAFe;AAIjBC,oBAJiB,GAIND,IAAIE,YAAJ,CAAiBJ,QAAQK,WAAR,EAAjB,CAJM;AAKjBC,qBALiB,GAKLZ,OAAOI,KAAP,CAAaA,KAAb,EAAoB;AACpCE,uBAASA,QAAQK,WAAR;AAD2B,aAApB,CALK;AAQjBE,qBARiB,GAQL,yBAAM,gDAAN,CARK;AAAA;AAAA,mBAUDC,kBAAQC,GAAR,CAAY,CAACN,QAAD,EAAWG,SAAX,EAAsBC,SAAtB,CAAZ,CAVC;;AAAA;AAUjBG,mBAViB;AAYjBC,gBAZiB,GAYVD,QAAQ,CAAR,CAZU;AAafE,qBAbe,GAaDF,QAAQ,CAAR,CAbC,CAafE,SAbe;AAAA;AAAA,mBAcUF,QAAQ,CAAR,EAAWG,IAAX,EAdV;;AAAA;AAAA;AAcNC,iBAdM,SAcfC,MAde,CAcND,KAdM;AAAA,wEAgBXH,IAhBW,EAgBFC,SAhBE,IAgBSE,OAAOA,KAhBhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAZ;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"livepeer.js","sourcesContent":["import LivepeerSDK from '@livepeer/sdk';\nimport { Lokka } from 'lokka';\nimport fetch from 'node-fetch';\nimport {Transport} from 'lokka-transport-http';\nimport Promise from \"promise\";\n\nconst client = new Lokka({\n  transport: new Transport('https://api.thegraph.com/subgraphs/name/adamsoffer/livepeer-canary')\n});\n\nconst query = `\n  query User($address: String!) {\n    delegator(first: 1, id: $address) {\n      shares {\n        rewardTokens\n        round {\n          timestamp\n        }\n      }\n    }\n  }\n`\n\nexport const fetchData = async (address) => {\n  const sdk = await LivepeerSDK();\n  const { rpc } = sdk;\n\n  const user_req = rpc.getDelegator(address.toLowerCase());\n  const qraph_req = client.query(query, {\n    address: address.toLowerCase()\n  })\n  const price_req = fetch(\"https://api.cryptonator.com/api/ticker/lpt-usd\");\n\n  const results = await Promise.all([user_req, qraph_req, price_req])\n\n  const user = results[0]\n  const { delegator } = results[1]\n  const { ticker: {price}} = await results[2].json()\n\n  return { ...user, ...delegator, price: price }\n}"]}